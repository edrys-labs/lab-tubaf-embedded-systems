id: Msw5YCj3DZzflNZTRLTr8PbUQO721rmpCxZlDqRN
createdBy: 15sg55K8KHkN
dateCreated: 1689064662293
name: Komplexaufgabe 2 - Analog-Digital-Wandler
meta:
  logo: >-
    https://raw.githubusercontent.com/TUBAF-IfI-LiaScript/VL_EAVD/master/excercise/images/excercise_04.png
  description: >-
    Die Studierenden setzen eine Anwendung um, die zwei existierende Klassen für
    die Verwendung von peripheren Bauteilen - Ultraschallsensor und LCD-Display
    - um. Im Ergebnis steht eine Applikation die kontinuierlich die Distanz zu
    einem Hindernis vermisst. Die Daten werden zudem über die Serielle
    Schnittstelle ausgegeben und analysiert.
  selfAssign: true
members:
  teacher: []
  student: []
modules:
  - url: >-
      https://raw.githubusercontent.com/edrys-labs/module-markdown-it/2.0.0/index.html
    config: >-
      # Komplexaufgabe 2 - Analog-Digital-Wandler


      Liebe Teilnehmerinnen und Teilnehmer,



      dies ist die erste Komplexaufgabe, die Ihnen Gelegenheit geben soll, sich
      zusätzlich zu den

      praktischen Übungen mit den Grundlagen der Programmierung eingebetteter
      Systeme vertraut zu machen.

      Wir werden nunmehr jede Woche eine neue Aufgabe für Sie freischalten.

      Die Aufgaben sind so konzipiert, dass Sie die Lösung selbstständig
      erarbeiten können.

      Sollten Sie dennoch Fragen haben, können Sie sich gerne an die Betreuer
      wenden.



      Wir haben uns für eine Remote-Lösung entschieden, da die Aufbauten
      Schritt für Schritt immer aufwändiger werden.

      Entsprechend erlaubt uns der Webzugriff einen ressourcensparenden und
      zeiteffizienten Einsatz der Setups.

      Die Umsetzung dieser Remote-Lösung ist für uns alle neu und wir bitten
      Sie daher um Verständnis, falls es zu Anfang noch zu Problemen kommen
      sollte.



      Noch umfasst unsere Lösung keinen Multi-User-Modus - entsprechend könnten
      Sie einen Kommilitonen ziemlich ärgern, wenn Sie ihm die Kontrolle
      entziehen.

      Prüfen Sie also bitte vorher, ob das Setup gerade von jemand anderem
      verwendet wird.

      Die „Station“ merkt sich immer den letzten Stand, verlassen Sie Ihren
      Arbeitsplatz ordentlich und kopieren sie vor dem verlassen einfach den
      Original-Code in den Editor ...



      Wir freuen uns auf Ihr Feedback und Ihre Anregungen.


      _Ihr CrossLab Team_

    studentConfig: ''
    teacherConfig: >-
      ## Welcome for Teachers


      > This can be used as a base laboratory to create further and more
      elaborate labs with [edrys-Lite](https://edrys-labs.github.io).

      > You are currently in the Lobby. If there is a station available you can
      switch to it and try out the terminal.

      > Otherwise, if you are in teacher-mode you can share a lab by clicking
      onto `setting` >> `station` and then by clicking the presented link,

      > which is the same as the current link, but only with the word `station`
      instead of `classroom`.
    stationConfig: ''
    showInCustom: lobby
    width: full
    height: huge
  - url: https://edrys-labs.github.io/module-editor/index.html
    config:
      editorText: |-
        #include <Servo.h>

         const int analogPin = A0;
         const int servoPin = 9;

         float calculate_dist_cm(float value){
           // Aufgabe 2: Bilden Sie die digitale Spannungsrepräsentation
           //            auf einen Abstandswert ab
           // TODO
           return value;
         }

         void make_scan(int start, int end, int step){
           // Aufgabe 0: Übernehmen Sie Zeile 41 - 50 and 52 - 59
           //            in eine Funktion
           // TODO
           //
           // Aufgabe 1: Ersetzen Sie die Arduino AnalogRead()
           //            Methode
         }

         void setup() {
           pinMode(analogPin, INPUT);
           pinMode(servoPin, OUTPUT);

           Serial.begin(9600);
           //Serial.println("Los geht's");
           delay(1000);

           Servo myservo;
           myservo.attach(servoPin);

           float val_v = 0;
           float val_cm = 0;

           Serial.print("rechts:");
           int pos = 0;
           for (pos = 0; pos <= 180; pos += 1) { // goes from 0 degrees to 180 degrees
             // in steps of 1 degree
             // Aufgabe 0: Prozedurale Umsetzung eines Schrittes
             myservo.write(pos);
             delay(15);
             val_v = analogRead(analogPin);
             val_cm = calculate_dist_cm(val_v);
             Serial.print(pos);
             Serial.print(",");
             Serial.print(val_cm);
             Serial.print(";");
           }
           Serial.println("");
           Serial.print("links:");
           for (pos = 180; pos >= 0; pos -= 1) { // goes from 180 degrees to 0 degrees
             myservo.write(pos);
             delay(15);
             val_v = analogRead(analogPin);
             val_cm = calculate_dist_cm(val_v);
             Serial.print(pos);
             Serial.print(",");
             Serial.print(val_cm);
             Serial.print(";");
           }
           Serial.println("");
         }

         void loop(){
         }
      runCommand: execute
      language: cpp
      theme: light
    showInCustom: station
    width: full
    height: medium
  - url: https://edrys-labs.github.io/module-station-stream/index.html
    stationConfig:
      video: true
      audio: false
    showInCustom: station
    width: half
    height: medium
  - url: https://edrys-labs.github.io/module-pyxtermjs/index.html
    config: ''
    studentConfig: ''
    teacherConfig: ''
    stationConfig:
      server: http://localhost:5000/pty
      execute: execute
      script: >
        echo $CODE | base64 --decode > Hello.ino

        arduino-cli sketch new Hello

        olddir=$(pwd)

        mv Hello.ino Hello

        cd Hello

        arduino-cli board attach -p /dev/ttyACM0 -b arduino:avr:uno

        cd $olddir

        arduino-cli compile Hello && arduino-cli upload -p /dev/ttyACM0 Hello &&
        serial-plotter.py --type radar
      enable:
        teacher: true
        student: true
    showInCustom: station
    width: full
    height: tall
  - url: >-
      https://raw.githubusercontent.com/edrys-labs/module-markdown-it/2.0.0/index.html
    config: >-
      # Komplexaufgabe 2 - Analog-Digital-Wandler


      > Die Aufgabe 1 zielt darauf Ihre Fähigkeiten mit Blick auf die Nutzung
      des Analog-Digital-Wandlers zu trainieren. Dafür soll ein "Laserscanner"
      implementiert werden.


      Die Arduino-Implementierung illustriert die erwartete Funktionalität - ein
      Infrarot-basierter Distanzsensor

      ([Sharp
      GP2Y0A02](http://www.pololu.com/file/download/gp2y0a02yk_e.pdf?file_id=0J156))
      schrittweise

      durch einen Servomotor um 180 Grad geschwenkt. Mit jedem Schritt um einen
      Grad wird eine neue Messung

      mit dem Distanzsensor realisiert. Der Distanzsensor ist mit dem Eingang
      `A0` des Mikrocontrollers verbunden.

      Der Servo-Motor, dessen Code aber nicht angepasst wird, wird über ein
      PWM-Signal an Pin 9 gesteuert. Die

      Grafik zeigt jeweils die Scans, die allerdings noch nicht in einen
      Distanzwert transformiert wurden.


      Folgen Sie den Anweisungen im Code und ersetzen Sie die Arduino-Funktionen
      durch die entsprechenden avrlibc Befehle:


      0. Verbessern Sie zunächst die Struktur des Codes, in dem Sie die
      redundanten Codeteile in eine Funktion `make_scan` "auslagern" (siehe
      Zeile 27 - 29).

      1. Ersetzen Sie die Konfiguration und die Durchführung der Analogen
      Messungen (`analogRead(analogPin)`) durch eine `avrlibc` Realisierung.

      2. Transformieren Sie die Spannungswerte in einen echten Distanzwert in
      $cm$.


      Die Visualisierung übernimmt eine 180 Einträge umfassendes Array. Dabei
      wird der Index als Winkelangabe und der enthaltene Wert als Distanz
      interpretiert.


      ## Original Code


      ``` cpp

      #include <Servo.h>


      const int analogPin = A0;

      const int servoPin = 9;


      float calculate_dist_cm(float value){
        // Aufgabe 2: Bilden Sie die digitale Spannungsrepräsentation
        //            auf einen Abstandswert ab
        // TODO
        return value;
      }


      void make_scan(int start, int end, int step){
        // Aufgabe 0: Übernehmen Sie Zeile 41 - 50 and 52 - 59
        //            in eine Funktion
        // TODO
        //
        // Aufgabe 1: Ersetzen Sie die Arduino AnalogRead()
        //            Methode
      }


      void setup() {
        pinMode(analogPin, INPUT);
        pinMode(servoPin, OUTPUT);

        Serial.begin(9600);
        //Serial.println("Los geht's");
        delay(1000);

        Servo myservo;
        myservo.attach(servoPin);

        float val_v = 0;
        float val_cm = 0;

        Serial.print("rechts:");
        int pos = 0;
        for (pos = 0; pos <= 180; pos += 1) { // goes from 0 degrees to 180 degrees
          // in steps of 1 degree
          // Aufgabe 0: Prozedurale Umsetzung eines Schrittes
          myservo.write(pos);
          delay(15);
          val_v = analogRead(analogPin);
          val_cm = calculate_dist_cm(val_v);
          Serial.print(pos);
          Serial.print(",");
          Serial.print(val_cm);
          Serial.print(";");
        }
        Serial.println("");
        Serial.print("links:");
        for (pos = 180; pos >= 0; pos -= 1) { // goes from 180 degrees to 0 degrees
          myservo.write(pos);
          delay(15);
          val_v = analogRead(analogPin);
          val_cm = calculate_dist_cm(val_v);
          Serial.print(pos);
          Serial.print(",");
          Serial.print(val_cm);
          Serial.print(";");
        }
        Serial.println("");
      }


      void loop(){

      }

      ```

    studentConfig: ''
    teacherConfig: ''
    stationConfig: >-
      ## Instructions for Station-Sharing


      You are currently responsible for sharing a station of this lab.

      You have multiple options to share a or your terminal.

      Therefor we use the pyxtermjs - terminal server from:


      https://github.com/edrys-labs/module-pyxtermjs


      ### Using Docker


      If you haven't done it so far, install
      [docker](https://docs.docker.com/engine/install/).

      Or, follow one of the instruction-videos for your system:


      <details>

      <summary>Install Docker on Linux</summary>

      <iframe
        style="width: 100%; aspect-ratio: 16 / 9"
        src="https://www.youtube.com/embed/cqbh-RneBlk?si=juvUM5d2OSZ28WBv"
        title="YouTube video player"
        frameborder="0"
        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
        referrerpolicy="strict-origin-when-cross-origin"
        allowfullscreen></iframe>
      </details>


      <details>

      <summary>Install Docker on Windows</summary>

      <iframe
        style="width: 100%; aspect-ratio: 16 / 9"
        src="https://www.youtube.com/embed/WDEdRmTCSs8?si=X0agStn1akNcZLGu"
        title="YouTube video player"
        frameborder="0"
        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
        referrerpolicy="strict-origin-when-cross-origin"
        allowfullscreen></iframe>
      </details>


      <details>

      <summary>Install Docker on MacOS</summary>

      <iframe
        style="width: 100%; aspect-ratio: 16 / 9"
        src="https://www.youtube.com/embed/-EXlfSsP49A?si=OZ_l4_2hDKb6ULQ_"
        title="YouTube video player"
        frameborder="0"
        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
        referrerpolicy="strict-origin-when-cross-origin"
        allowfullscreen></iframe>
      </details>


      Then the only thing that is required is to run the following command:


      ```bash

      docker run -it -p 5000:5000 crosslab/edrys_pyxtermjs_arduino --device=/dev/ttyACM0:/dev/ttyACM0

      ```


      This will download the pyxtermjs terminal-server from docker-hub and run
      it in a secure environment.

      It contains support for:


      - `arduino`

      - `arduino-cli`


      ### Using Python


      You can also share your terminal directly via Python, visit the follwing
      project


      https://github.com/edrys-labs/module-pyxtermjs


      ... the easiest way is to perform the following steps:


      ``` bash

      # 1. clone the repository or download the folder manually

      git clone https://github.com/edrys-labs/module-pyxtermjs


      # 2. install all required sources

      pip3 install -r requirements.txt


      # 3. run the terminal-server

      python3 -m pyxtermjs --cors True --command bash --port 5000

      ```
    showInCustom: station
    width: half
    height: tall
